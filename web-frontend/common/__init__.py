from subprocess import Popen, PIPEimport os,re,web,jsonfrom common.restfulclient import RestfulError,RestfulClientdef exec_sub(cmd_args, wait = None):    proc = Popen(cmd_args, shell=True, stdout=PIPE, stderr=PIPE)    stdout = ""    stderr = ""    if wait == None or wait == True:        (stdout, stderr) = proc.communicate()        proc.wait()        if proc.returncode != 0:            raise Exception(stderr)    return (stdout, proc.returncode)    def exec_cmd(cmd_args):    lines = os.popen(cmd_args).readlines()     return lines    def modify_conf_file(regex, replace, file_name):    fp=open(file_name,'r')      alllines=fp.readlines()      fp.close()      fp=open(file_name,'w')    totol_number = 0    for eachline in alllines:        result, number =re.subn(regex, replace, eachline)        totol_number += number        fp.writelines(result)    if totol_number == 0:        fp.writelines(replace + "\n")    fp.close()      def get_method_query_to_map(query):    if query == "":        return {}    item = query.split("&")    map = {}    for i in item:        _i = i.split("=")        map[_i[0]] = _i[1]    return mapdef deal_array_data_for_client_ui(query, record_set):    query = get_method_query_to_map(query)    record_set_len = len(record_set)    if "rp" in query.keys() and "page" in query.keys():        rp = int(query["rp"])        page =  int(query["page"])        start = ( page - 1 ) * rp        if start < record_set_len:            record_set = record_set[start:start + rp]        pages = {}        pages["page"] = page        record_set.append(pages)    total = {}    total["total"] = record_set_len    record_set.append(total)    return record_set    def auth():    name = web.cookies().get('user_name')    passwd = web.cookies().get('user_passwd')    if not name or not passwd:        raise RestfulError('570 cookies error')    data = {        "name":name,        "passwd":passwd,    }            try:        RestfulClient.getresponse("POST", "/auth", json.dumps(data))    except Exception as e:        raise RestfulError(e.message)